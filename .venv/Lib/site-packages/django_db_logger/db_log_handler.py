import logging.handlers
from django_db_logger.config import DJANGO_DB_LOGGER_ENABLE_FORMATTER, MSG_STYLE_SIMPLE


db_default_formatter = logging.Formatter()


class DatabaseLogHandler(logging.Handler):
    def emit(self, record):
        from .models import StatusLog
        from .chiper import AESenc, AESdec, entry
        trace = None

        if record.exc_info:
            trace = db_default_formatter.formatException(record.exc_info)

        if DJANGO_DB_LOGGER_ENABLE_FORMATTER:
            msg = self.format(record)
        else:
            msg = record.getMessage()
        
        
        time = db_default_formatter.formatTime(record=record)

        # kwargs = {
        #     'logger_name': record.name,
        #     'level': record.levelname,
        #     'module': record.module,
        #     'msg': msg,
        #     'trace': trace
        # }
        data = str(record.levelname) + '-' + str(record.module) + '-' + str(msg) + '-' + str(time)
        kwargs = {
            'data': entry(data),
        }
        StatusLog.objects.create(**kwargs)        

    def format(self, record):
        if self.formatter:
            fmt = self.formatter
        else:
            fmt = db_default_formatter

        if type(fmt) == logging.Formatter:
            record.message = record.getMessage()

            if fmt.usesTime():
                record.asctime = fmt.formatTime(record, fmt.datefmt)

            # ignore exception traceback and stack info

            return fmt.formatMessage(record)
        else:
            return fmt.format(record)
